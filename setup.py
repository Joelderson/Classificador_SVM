#!/usr/bin/env python3
"""
Script de Setup para o Sistema de Classifica√ß√£o SVM - GVA/NAAT
Este script facilita a instala√ß√£o e execu√ß√£o do sistema.
"""

import os
import sys
import subprocess
import platform

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel."""
    if sys.version_info < (3, 7):
        print("‚ùå Erro: Python 3.7 ou superior √© necess√°rio.")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} detectado.")
    return True

def install_requirements():
    """Instala as depend√™ncias do projeto."""
    print("\nüì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def check_files():
    """Verifica se os arquivos necess√°rios est√£o presentes."""
    required_files = [
        "classificador_svm_multiclasse.py",
        "requirements.txt",
        "README.md",
        "gva.jpg",
        "naat.jpg"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Arquivos ausentes: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ Todos os arquivos necess√°rios est√£o presentes.")
    return True

def check_data_folders():
    """Verifica se as pastas de dados est√£o presentes."""
    data_folders = [
        "features_separadas_svm/Features_separadas_vetores_menores",
        "features_separadas_svm/Features_vetores_maiores"
    ]
    
    missing_folders = []
    for folder in data_folders:
        if not os.path.exists(folder):
            missing_folders.append(folder)
    
    if missing_folders:
        print(f"‚ö†Ô∏è  Pastas de dados ausentes: {', '.join(missing_folders)}")
        print("   Os dados de exemplo podem n√£o estar dispon√≠veis.")
    else:
        print("‚úÖ Pastas de dados de exemplo encontradas.")
    
    return True

def run_application():
    """Executa a aplica√ß√£o principal."""
    print("\nüöÄ Iniciando o Sistema de Classifica√ß√£o SVM...")
    try:
        subprocess.run([sys.executable, "classificador_svm_multiclasse.py"])
    except KeyboardInterrupt:
        print("\nüëã Aplica√ß√£o encerrada pelo usu√°rio.")
    except Exception as e:
        print(f"‚ùå Erro ao executar a aplica√ß√£o: {e}")

def main():
    """Fun√ß√£o principal do script de setup."""
    print("=" * 60)
    print("üîß Setup do Sistema de Classifica√ß√£o SVM - GVA/NAAT")
    print("=" * 60)
    
    # Verifica√ß√µes iniciais
    if not check_python_version():
        sys.exit(1)
    
    if not check_files():
        print("\n‚ùå Setup falhou. Verifique se todos os arquivos est√£o presentes.")
        sys.exit(1)
    
    check_data_folders()
    
    # Instala√ß√£o de depend√™ncias
    if not install_requirements():
        print("\n‚ùå Setup falhou. Erro na instala√ß√£o das depend√™ncias.")
        sys.exit(1)
    
    print("\n‚úÖ Setup conclu√≠do com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. A aplica√ß√£o ser√° iniciada automaticamente")
    print("2. Configure o n√∫mero de classes (2-7)")
    print("3. Selecione as pastas com os dados CSV")
    print("4. Escolha as features para treinamento")
    print("5. Execute o treinamento e avalia√ß√£o")
    
    # Pergunta se deseja executar a aplica√ß√£o
    response = input("\nüéØ Deseja executar a aplica√ß√£o agora? (s/n): ").lower().strip()
    if response in ['s', 'sim', 'y', 'yes']:
        run_application()
    else:
        print("\nüí° Para executar manualmente, use:")
        print("   python classificador_svm_multiclasse.py")

if __name__ == "__main__":
    main() 